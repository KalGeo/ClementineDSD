/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -N -m -i dbus/metatypes.h -p dbus/udisks2filesystem /media/manolo/G/github/ClementineDSDCursor/ClementineDSD/src/dbus/org.freedesktop.UDisks2.Filesystem.xml
 *
 * qdbusxml2cpp is Copyright (C) 2022 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef UDISKS2FILESYSTEM_H
#define UDISKS2FILESYSTEM_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "dbus/metatypes.h"

/*
 * Proxy class for interface org.freedesktop.UDisks2.Filesystem
 */
class OrgFreedesktopUDisks2FilesystemInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.freedesktop.UDisks2.Filesystem"; }

public:
    OrgFreedesktopUDisks2FilesystemInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~OrgFreedesktopUDisks2FilesystemInterface();

    Q_PROPERTY(QList<QByteArray> MountPoints READ mountPoints)
    inline QList<QByteArray> mountPoints() const
    { return qvariant_cast< QList<QByteArray> >(property("MountPoints")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QString> Mount(const QVariantMap &options)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(options);
        return asyncCallWithArgumentList(QStringLiteral("Mount"), argumentList);
    }

    inline QDBusPendingReply<> Unmount(const QVariantMap &options)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(options);
        return asyncCallWithArgumentList(QStringLiteral("Unmount"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

#endif
